/* Copyright 2012-2014, Peter A. Bigot
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the software nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*! \mainpage BSP430 Board Support Package for MSP430 Microcontrollers
\tableofcontents

BSP430 is a set of C language adaptation layers simplifying cross-MCU
library and application development on Texas Instruments MSP430
microcontrollers.

The target audience is experienced embedded systems developers who need full
control over the microcontroller but are willing to trade a small amount of
performance for improved component re-usability and rapid prototyping.

BSP430 features:

\li A @link bsp430_config configuration infrastructure @endlink allowing you
to include only those resources and capabilities required by your
application;

\li A @link layer set of abstraction layers @endlink enabling efficient
identification and manipulation of peripheral capabilities at both register
and functional levels;

\li A @link callbacks callback infrastructure @endlink allowing unrelated
capabilities to share resources including port and timer interrupt handlers;

\li A @link platform platform model @endlink that enables rapid development
on common hardware solutions including six TI experimenter boards as well as
custom boards;

\li @link enhanced Enhanced support @endlink for watchdog, low power mode
execution, and interrupt management;

\li A @link buildenv build infrastructure @endlink designed to simplify
creating new applications, in a POSIX command-line environment supported
by GNU Make, focused on the GNU toolchain (both legacy mspgcc and
upstream msp430-elf-gcc) but also supporting the TI compiler from Code
Composer Studio;

\li Value-added capabilities including a @link bsp430/utility/cli.h command
line interface@endlink, @link bsp430/utility/unittest.h unit test
framework@endlink, and @link bsp430/rf/rfem.h RF Evaluation
Module@endlink interface

BSP430 is released as open source under the <a
href="http://www.opensource.org/licenses/BSD-3-Clause">BSD-3-Clause</a>
license.

For further details, please see the Background, Philosophy, @link coding
Coding Style@endlink, and Maintenance pages.

The project page is at http://github.com/pabigot/bsp430.  Releases can be
obtained by cloning the git repository:

@code
git clone git://github.com/pabigot/bsp430.git
@endcode

or by downloading a <a href="http://github.com/pabigot/bsp430/tarball/stable">tar
file</a> of the latest stable source release.

Information on specific releases is available in @ref releases.

Please file support requests and bug reports on the <a
href="http://github.com/pabigot/bsp430/issues">issue tracker</a>.

\section mp_capabilities Capabilities Currently Supported

\li @link bsp430/periph/timer.h Timers @endlink supporting both Timer_A and
Timer_B supported in a common interface;

\li A @link bsp430/clock.h standard clock interface @endlink supporting
MCLK, SMCLK, ACLK, and LFXT1 crystal configuration in the clock systems in
the @link bsp430/periph/bc2.h 2xx@endlink, @link bsp430/periph/fllplus.h
4xx@endlink, @link bsp430/periph/ucs.h 5xx/6xx@endlink, and @link
bsp430/periph/cs.h FR5xx@endlink families;

\li A @link bsp430/serial.h standard serial interface @endlink supporting
UART, SPI, and I2C using the USCI variants in the @link bsp430/periph/usci.h
2xx/4xx@endlink, @link bsp430/periph/usci5.h 5xx/6xx@endlink, and @link
bsp430/periph/eusci.h FR5xx @endlink families;

\li Access to the @link bsp430/periph/sys.h SYS@endlink and @link
bsp430/periph/pmm.h PMM@endlink modules for 5xx/6xx/FR5xx devices allowing
detection of reboot cause and control of ultra-low-power LPMx.5 modes;

\li Pre-configured support for the @link bsp430/rf/rfem.h RF Evaluation
Module@endlink headers on many experimenter boards along with hardware
presentation definitions supporting specific radios like the CC110x, CC112x,
CC2500, CC2520, and CC3000.

\li Support for @link bsp430/utility/m25p.h M25P-compatible SPI flash
memory@endlink modules common to wireless sensor nodes;

\li Utilities for a bi-directional @link bsp430/utility/console.h serial
console@endlink with a @link bsp430/utility/cli.h command line
interface@endlink that supports editing input;

\li Miscellaneous utilities including @link bsp430/utility/led.h
LEDs@endlink; @link bsp430/utility/uptime.h ACLK-driven system timer@endlink
and @ref grp_timer_alarm; and demonstration @link bsp430/utility/onewire.h
1-Wire bus@endlink

\section mp_platforms Hardware Platforms Currently Supported

\li <a href="http://www.ti.com/tool/msp-exp430g2">MSP-EXP430G2 ("LaunchPad")</a>
\li <a href="http://www.ti.com/tool/msp-exp430fr5739">MSP-EXP430FR5739 ("Fraunchpad")</a>
\li <a href="http://www.ti.com/tool/msp-exp430f5438">MSP-EXP430F5438</a>
\li <a href="http://www.ti.com/tool/msp-exp430f5529">MSP-EXP430F5529 ("USB Experimenter's Board")</a>
\li <a href="http://www.ti.com/tool/msp-exp430f5529lp">MSP-EXP430F5529LP ("USB LaunchPad")</a>
\li <a href="http://www.ti.com/tool/msp-exp430fr5969">MSP-EXP430FR5969 ("Wolverine LaunchPad")</a>
\li <a href="http://www.ti.com/tool/msp-exp430fr4133">MSP-EXP430FR4133</a>
\li <a href="http://www.ti.com/tool/msp-exp430fg4618">MSP-EXP430FG4618</a>
\li <a href="http://www.ti.com/tool/em430f5137rf900">EM430-900</a>
\li <a href="http://google.com/?q=people+power+company+surf+board">PeoplePower Company SuRF
Board</a>
\li <a href="http://www.ti.com/tool/cc1125dk">TrxEB SmartRF Transceiver Evaluation Board</a>
\li <a href="http://www.ti.com/tool/msp-ts430rgz48c">MSP430FR5969 in a TS430RGZ48C carrier ("Wolverine")</a>
\li <a href="http://www.ti.com/tool/ez430-rf2500t">EZ430-RF2500T</a>

\section mp_external Useful External Libraries

\subsection mp_external_embtextf embtextf (Embedded System Text Formatting)
@see http://pabigot.github.com/embtextf/

BSP430 was initially developed using the <a
href="http://sourceforge.net/projects/mspgcc/">MSPGCC</a> toolchain, a port
of the GNU compiler collection to the MSP430.  The msp430-libc library that
is part of this toolchain includes a space-efficient formatting print
capability compatible with C's @c printf(3c) functionality using a callback
that allows it to output to an application-provided location (a memory
buffer, a serial console, an LCD screen, etc.).  Subsequently those
capabilities have been extracted, refactored, and extended as the <a
href="http://pabigot.github.com/embtextf/">embtextf</a> library, making
the same features available to Code Composer Studio and other toolchains
that do not have an efficient generic formatted print capability.  These
functions are used in <bsp430/utility/console.h> by defining
#BSP430_CONSOLE_USE_EMBTEXTF, which is enabled by the default when @c
EMBTEXTF_ROOT is defined for use by
<tt>${BSP430_ROOT}/make/Makefile.common</tt>.

\subsection mp_external_cc3000 CC3000 (SimpleLink&trade; Wi-Fi Module)
@see http://pabigot.github.com/cc3000/

This library provides a microcontroller API to the <a
href="http://www.ti.com/product/cc3000">Texas Instruments CC3000</a>, an
802.11 wireless network interface.  The content is from TI's host
driver, but has been repackaged to make it easier to share among
applications and to reduce include file namespace collisions.  The
library as validated in BSP430 is available in a <a
href="https://github.com/pabigot/cc3000">github repository</a>.

\subsection mp_external_u8glib u8glib (Graphics for Embedded Systems)
@see http://code.google.com/p/u8glib/

This library is a general-purpose graphics library supporting liquid crystal
displays (LCDs) commonly used on embedded platforms.  It provides a variety
of fonts as well as graphical elements.  The library as
validated in BSP430 is available in a <a
href="https://github.com/pabigot/u8glib">github repository</a>.

\subsection mp_external_fatfs FatFs (FAT file system)
@see http://elm-chan.org/fsw/ff/00index_e.html

This library is a generic FAT file system module for embedded systems.  The
library as validated in BSP430 is available in a <a
href="https://github.com/pabigot/FatFs">github repository</a>.

\section mp_examples Provided Examples

\subsection ex_utility Value-Added Utility Examples

\li \ref ex_utility_unittest demonstrates the primitive @link
bsp430/utility/unittest.h unit test capability@endlink supported by BSP430.

\li \ref ex_utility_cli demonstrates the command line interface structure
based on the @link bsp430/utility/console.h console capability @endlink.

\li \ref ex_periph_alarm provides an interactive program for using one-shot
and repeating alarms with the @ref grp_timer_alarm.

\li \ref ex_rf_cc110x demonstrates the abstraction of the @link
bsp430/rf/rfem.h RF Evaluation Module @endlink available on many MSP430
experimenter boards by displaying information about a connected ChipCon
CC1101, CC2500, or compatible radio that is accessed with the SPI
configuration and pins described in <bsp430/rf/cc110x.h>.  Similar examples
are presented for the <bsp430/rf/cc2520.h> and <bsp430/rf/cc1125.h>
abstractions.

\li \ref ex_utility_m25p demonstrates use of a serial flash device through
the <bsp430/utility/m25p.h> interface.

\li \ref ex_utility_u8glib demonstrates use of the onboard LCD on several TI
experimenter boards through the <bsp430/utility/u8glib.h> interface.

\li \ref ex_platform_exp430f5529_fatfs demonstrates use of <a
href="http://elm-chan.org/fsw/ff/00index_e.html">FatFs</a> with the BSP430
SPI serial abstraction

\li \ref ex_rf_cc3000 is a fairly complex example providing interactive
exploration of the <a
href="http://processors.wiki.ti.com/index.php/CC3000_Wi-Fi_for_MCU">Texas
Instruments CC3000 SimpleLink(tm) Wi-Fi</a> evaluation module.  It
demonstrates advanced use of the BSP430 @link bsp430/utility/cli.h
command line interface @endlink as well as a @link bsp430/serial.h SPI
interface @endlink to the on most TI experimenter boards through the
@link bsp430/rf/rfem.h RFEM @endlink or @link
configBSP430_RF_CC3000BOOST CC3000BOOST @endlink capabilities of BSP430.

\subsection ex_sensors Sensors

\li \ref ex_sensors_ds18b20 demonstrates temperature measurement with the
DS18B20 (or similar) 1-wire temperature sensor
\li \ref ex_sensors_tmp102 demonstrates the I2C interface with a TI TMP102
temperature sensor
\li \ref ex_sensors_hh10d demonstrates measuring the frequency of an input
signal using the Hope RF Humidity Sensor
\li \ref ex_sensors_venus6pps demonstrates the @link bsp430/utility/gps.h
BSP430 GPS interface@endlink and synchronizing the @link ulBSP430uptime()
uptime clock@endlink with a 1PPS GPS time source


\subsection ex_bootstrap Bootstrap Support Programs
The following examples lead you through the basic capabilities of BSP430,
following the same path that you would use if you were adding support for a
new platform.

\li \ref ex_bootstrap_nop confirms that your environment is prepared to
build an application for a particular platform
\li \ref ex_bootstrap_blink confirms that your platform can blink LEDs
\li \ref ex_bootstrap_clocks brings out clock signals to test points
\li \ref ex_bootstrap_console prints output to and captures input from the platform serial
connection
\li \ref ex_bootstrap_button validates the secondary input path using a
button on the board
\li \ref ex_bootstrap_lpm is used to configure the board into low power
mode, verifying that the numbers in the data sheet are achievable
\li \ref ex_bootstrap_applpm is used to interactively evaluate different low
power modes with and without the peripherals being disabled

@copyright_doc
*/
